
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Validate if a string is a recognizable ISO timestamp format (simplified)
    function isISOTimestampString(ts) {
      return ts is string && ts.matches("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z?");
    }

    // Validate an image URL from Firebase Storage (admin uploaded)
    function isValidAdminImageUrl(url) {
      return url is string && url.matches("https://firebasestorage.googleapis.com/v0/b/grenecultivar.appspot.com/o/cultivar-images%2F(?!user-submitted%2F).*");
    }

    // Validate an image URL from Firebase Storage (user submitted)
    function isValidUserSubmittedImageUrl(url) {
      return url is string && url.matches("https://firebasestorage.googleapis.com/v0/b/grenecultivar.appspot.com/o/cultivar-images%2Fuser-submitted%2F.*");
    }

    function isValidDocumentUrl(url) {
      // Allows any https URL for documents for simplicity, or a Firebase storage URL.
      // For stricter validation, a more specific regex for your doc storage paths could be used.
      return url is string && (
        url.startsWith("https://firebasestorage.googleapis.com/") ||
        url.startsWith("https://") // General HTTPS link
      );
    }

    // Cultivars collection
    match /cultivars/{cultivarId} {
      allow read: if resource.data.status == 'Live' || resource.data.status == 'featured' || isAuthenticated();
      allow list: if true; // Public can list, client filters

      allow create: if isAuthenticated() &&
        request.resource.data.name is string && request.resource.data.name.size() > 0 &&
        request.resource.data.genetics is string &&
        request.resource.data.status is string && ['Live', 'featured', 'recentlyAdded', 'User Submitted', 'Hide', 'archived'].hasAny([request.resource.data.status]) &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time &&
        (request.resource.data.thc is map || request.resource.data.thc == null) &&
        (request.resource.data.cbd is map || request.resource.data.cbd == null) &&
        (request.resource.data.images is list) &&
        (request.resource.data.images.size() == 0 || request.resource.data.images.all(img ->
          img is map && img.id is string && img.url is string && isValidAdminImageUrl(img.url) && img.alt is string
        )) &&
        (request.resource.data.terpeneProfile is list) &&
        (request.resource.data.terpeneProfile.size() == 0 || request.resource.data.terpeneProfile.all(tp ->
           tp is map && tp.name is string && (tp.percentage is number || tp.percentage == null)
        )) &&
        (request.resource.data.effects is list) &&
        (request.resource.data.medicalEffects is list || request.resource.data.medicalEffects == null) &&
        (request.resource.data.flavors is list || request.resource.data.flavors == null) &&
        (request.resource.data.parents is list || request.resource.data.parents == null) &&
        (request.resource.data.children is list || request.resource.data.children == null) &&
        (request.resource.data.reviews is list && request.resource.data.reviews.size() == 0) &&
        (request.resource.data.history is list && request.resource.data.history.size() > 0 && request.resource.data.history[0].event == "Cultivar Created by Admin" && isISOTimestampString(request.resource.data.history[0].timestamp)) &&
        (request.resource.data.additionalInfo is map || request.resource.data.additionalInfo == null) &&
        (request.resource.data.additionalInfo == null || (
          (request.resource.data.additionalInfo.plantPicture is list || request.resource.data.additionalInfo.plantPicture == null) &&
          (request.resource.data.additionalInfo.plantPicture == null || request.resource.data.additionalInfo.plantPicture.size() == 0 || request.resource.data.additionalInfo.plantPicture.all(item ->
            item is map && item.name is string && item.url is string && (item.fileType == 'image' || item.fileType == 'pdf') && isValidAdminImageUrl(item.url)
          )) &&
          (request.resource.data.additionalInfo.geneticCertificate is list || request.resource.data.additionalInfo.geneticCertificate == null) &&
          (request.resource.data.additionalInfo.geneticCertificate == null || request.resource.data.additionalInfo.geneticCertificate.size() == 0 || request.resource.data.additionalInfo.geneticCertificate.all(item ->
            item is map && item.name is string && item.url is string && item.fileType == 'pdf' && isValidDocumentUrl(item.url)
          ))
          // Simplified for other additionalInfo fields
        ));


      allow update: if isAuthenticated() &&
        request.resource.data.name is string && request.resource.data.name.size() > 0 &&
        request.resource.data.updatedAt == request.time &&
        request.resource.data.createdAt == resource.data.createdAt && // createdAt cannot be changed
        // Allow status to be any of the valid enum values
        (request.resource.data.status is string && ['Live', 'featured', 'recentlyAdded', 'User Submitted', 'Hide', 'archived'].hasAny([request.resource.data.status])) &&
        // Validate images array if present in the update
        (request.resource.data.images == null || (
          request.resource.data.images is list &&
          (request.resource.data.images.size() == 0 || request.resource.data.images.all(img ->
            img is map && img.id is string && img.url is string && isValidAdminImageUrl(img.url) && img.alt is string
          ))
        )) &&
        // Validate terpeneProfile array if present
        (request.resource.data.terpeneProfile == null || (
          request.resource.data.terpeneProfile is list &&
          (request.resource.data.terpeneProfile.size() == 0 || request.resource.data.terpeneProfile.all(tp ->
            tp is map && tp.name is string && (tp.percentage is number || tp.percentage == null)
          ))
        )) &&
        // Allow effects, medicalEffects, flavors, parents, children to be updated (typically with arrayUnion/Remove)
        // Basic type check if the field is part of the update
        (request.resource.data.effects == null || request.resource.data.effects is list) &&
        (request.resource.data.medicalEffects == null || request.resource.data.medicalEffects is list) &&
        (request.resource.data.flavors == null || request.resource.data.flavors is list) &&
        (request.resource.data.parents == null || request.resource.data.parents is list) &&
        (request.resource.data.children == null || request.resource.data.children is list) &&
        // Validate additionalInfo if present
        (request.resource.data.additionalInfo == null || request.resource.data.additionalInfo is map) &&
        // Reviews and History are usually appended, allow if other conditions are met.
        // History entries must have a string timestamp and an event.
        (request.resource.data.history.size() > resource.data.history.size() || request.resource.data.history.size() == resource.data.history.size()) &&
        (request.resource.data.history.size() == 0 || request.resource.data.history.all(item ->
            item is map && item.event is string && isISOTimestampString(item.timestamp)
        )) &&
        (request.resource.data.reviews.size() >= resource.data.reviews.size() || request.resource.data.reviews.size() == resource.data.reviews.size()) &&
        (request.resource.data.reviews.size() == 0 || request.resource.data.reviews.all(item ->
            item is map && item.text is string && item.rating is number && isISOTimestampString(item.createdAt)
        ));

      allow delete: if isAuthenticated(); // Admin role check needed for production
    }

    // User submitted cultivars
    match /submitted_cultivars/{submissionId} {
      allow read, update, delete: if isAuthenticated(); // Admin role check needed for production

      allow create: if
        request.resource.data.name is string && request.resource.data.name.size() >= 3 &&
        request.resource.data.sourceEmail is string && request.resource.data.sourceEmail.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$") &&
        request.resource.data.status == "User Submitted" &&
        request.resource.data.submittedAt == request.time &&
        // Optional fields: check type if present, or allow if null/not present
        (request.resource.data.get('genetics', null) == null || request.resource.data.genetics is string) &&
        (request.resource.data.get('description', null) == null || request.resource.data.description is string) &&
        (request.resource.data.get('effects', null) == null || request.resource.data.effects is list) &&
        (request.resource.data.get('flavors', null) == null || request.resource.data.flavors is list) &&
        (request.resource.data.get('terpeneProfile', null) == null || (
            request.resource.data.terpeneProfile is list &&
            (request.resource.data.terpeneProfile.size() == 0 || request.resource.data.terpeneProfile.all(tp ->
                tp is map && tp.name is string && tp.id is string && tp.get('percentage', null) == null // No percentage from user
            ))
        )) &&
        (request.resource.data.get('images', null) == null || (
          request.resource.data.images is list && request.resource.data.images.size() <= 1 && // Max 1 image
          (request.resource.data.images.size() == 0 ||
            (
              request.resource.data.images[0] is map &&
              request.resource.data.images[0].url is string && isValidUserSubmittedImageUrl(request.resource.data.images[0].url) &&
              request.resource.data.images[0].alt is string
            )
          )
        )) &&
        (request.resource.data.get('thc', null) == null || request.resource.data.thc is map) &&
        (request.resource.data.get('cbd', null) == null || request.resource.data.cbd is map) &&
        // Ensure only allowed fields are present
        request.resource.data.keys().hasOnly([
          'name', 'sourceEmail', 'source', 'genetics', 'description', 'effects', 'flavors',
          'terpeneProfile', 'images', 'thc', 'cbd', 'status', 'submittedAt'
        ]);
    }
  }
}

    