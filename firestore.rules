rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isISOTimestampString(timestampStr) {
      // Basic check for ISO-like string format. For stricter validation, consider regex.
      return timestampStr is string && timestampStr.size() > 19 && timestampStr.matches('^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.*Z$');
    }

    // Validates a single image object, used for arrays of images.
    // expectedPathRegexPart should be the Firebase Storage path part, e.g., 'cultivar-images%2Fuser-submitted%2F' or 'cultivar-images%2F(?!user-submitted%2F)'
    function isValidCultivarImageObject(img, expectedPathRegexPart) {
      return img is map &&
             img.keys().hasAll(['id', 'url', 'alt']) && // 'data-ai-hint' is optional
             img.id is string &&
             img.url is string && img.url.matches('https://firebasestorage.googleapis.com/v0/b/grenecultivar/o/' + expectedPathRegexPart + '.*\\?alt=media&token=.*') &&
             img.alt is string &&
             (img.get('data-ai-hint', null) == null || img['data-ai-hint'] is string);
    }

    function isValidCultivarImageArray(imageList, expectedPathRegexPart) {
      return imageList is list &&
             (imageList.size() == 0 || imageList.all(img -> isValidCultivarImageObject(img, expectedPathRegexPart)));
    }

    function isValidCannabinoidProfile(profile) {
      return profile is map &&
             (profile.get('min', null) == null || profile.min is number) &&
             (profile.get('max', null) == null || profile.max is number) &&
             (profile.get('min', null) == null || profile.get('max', null) == null || profile.min <= profile.max);
    }

    function isValidStringArray(arr) {
      return arr is list && (arr.size() == 0 || arr.all(item -> item is string));
    }

    function isValidTerpeneProfileArray(arr) {
      return arr is list && (arr.size() == 0 || arr.all(tp ->
        tp is map &&
        tp.keys().hasAll(['id', 'name']) && // 'percentage' is optional
        tp.id is string &&
        tp.name is string &&
        (tp.get('percentage', null) == null || tp.percentage is number)
      ));
    }

    // For user submissions to the 'submitted_cultivars' collection
    match /submitted_cultivars/{submissionId} {
      allow read, update, delete: if isAuthenticated(); // Admins for moderation

      allow create: if request.resource.data.name is string && request.resource.data.name.size() > 0
                      && request.resource.data.sourceEmail is string && request.resource.data.sourceEmail.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$')
                      && request.resource.data.status == 'User Submitted'
                      && request.resource.data.submittedAt == request.time
                      && (request.resource.data.get('genetics', null) == null || request.resource.data.genetics is string)
                      && (request.resource.data.get('description', null) == null || request.resource.data.description is string)
                      && (request.resource.data.get('effects', null) == null || isValidStringArray(request.resource.data.effects))
                      && (request.resource.data.get('flavors', null) == null || isValidStringArray(request.resource.data.flavors))
                      && (request.resource.data.get('terpeneProfile', null) == null || isValidTerpeneProfileArray(request.resource.data.terpeneProfile))
                      && (request.resource.data.get('thc', null) == null || isValidCannabinoidProfile(request.resource.data.thc))
                      && (request.resource.data.get('cbd', null) == null || isValidCannabinoidProfile(request.resource.data.cbd))
                      && (request.resource.data.get('images', null) == null || (
                            isValidCultivarImageArray(request.resource.data.images, 'cultivar-images%2Fuser-submitted%2F') &&
                            request.resource.data.images.size() <= 1 // Max 1 image for submission
                         ))
                      && request.resource.data.keys().hasOnly([
                           'name', 'sourceEmail', 'source', 'genetics', 'description', 'effects', 'flavors',
                           'terpeneProfile', 'images', 'thc', 'cbd', 'status', 'submittedAt'
                         ]);
    }

    // Main 'cultivars' collection, typically admin-managed after initial seeding or submission approval
    match /cultivars/{cultivarId} {
      allow list: if true;
      allow get: if resource.data.status == 'Live'
                     || resource.data.status == 'featured'
                     || isAuthenticated();

      allow create: if isAuthenticated()
                      && request.resource.data.name is string && request.resource.data.name.size() > 0
                      && request.resource.data.status is string
                      && (request.resource.data.get('images', null) == null || isValidCultivarImageArray(request.resource.data.images, 'cultivar-images%2F(?!user-submitted%2F)')) // Admin image path
                      && request.resource.data.createdAt == request.time
                      && request.resource.data.updatedAt == request.time
                      && request.resource.data.history is list && request.resource.data.history.size() >= 1 && isISOTimestampString(request.resource.data.history[0].timestamp)
                      && (request.resource.data.get('reviews', []) is list && request.resource.data.reviews.size() == 0);

      allow update: if isAuthenticated()
                      && request.resource.data.updatedAt == request.time
                      && request.resource.data.createdAt == resource.data.createdAt
                      && (request.resource.data.get('images', null) == null || isValidCultivarImageArray(request.resource.data.images, 'cultivar-images%2F(?!user-submitted%2F)')) // Admin image path
                      // Allow reviews and history to be appended (client sends full array, or arrayUnion)
                      && (request.resource.data.get('reviews', null) == null || (
                          request.resource.data.reviews is list &&
                          (request.resource.data.reviews.size() == 0 || request.resource.data.reviews.all(rev -> rev is map && rev.id is string && rev.user is string && rev.rating is number && rev.text is string && isISOTimestampString(rev.createdAt)))
                        ))
                      && (request.resource.data.get('history', null) == null || (
                          request.resource.data.history is list &&
                          (request.resource.data.history.size() == 0 || request.resource.data.history.all(entry -> entry is map && entry.event is string && isISOTimestampString(entry.timestamp)))
                        ));

      allow delete: if isAuthenticated();
    }
  }
}
