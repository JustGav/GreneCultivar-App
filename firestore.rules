
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a string looks like an ISO timestamp
    function isISOTimestampString(ts) {
      return ts is string && ts.matches("^([0-9]{4})-?(1[0-2]|0[1-9])-?(3[01]|0[1-9]|[12][0-9])T(2[0-3]|[01][0-9]):?([0-5][0-9]):?([0-5][0-9])(\\.[0-9]+)?(Z|[\\+-](?:2[0-3]|[01][0-9]):?[0-5][0-9])?$");
    }

    // Rules for 'submitted_cultivars' collection
    match /submitted_cultivars/{submissionId} {
      allow read, update, delete: if request.auth != null; // Only authenticated users can manage submissions

      allow create: if
        request.resource.data.name is string && request.resource.data.name.size() > 0 &&
        request.resource.data.sourceEmail is string && request.resource.data.sourceEmail.matches(".+@.+\\..+") &&
        request.resource.data.status == "User Submitted" &&
        request.resource.data.submittedAt == request.time &&
        // Validate optional fields if present
        (request.resource.data.get('genetics', null) == null || request.resource.data.genetics is string) &&
        (request.resource.data.get('description', null) == null || request.resource.data.description is string) &&
        (request.resource.data.get('effects', null) == null || request.resource.data.effects is list) &&
        (request.resource.data.get('flavors', null) == null || request.resource.data.flavors is list) &&
        (request.resource.data.get('terpeneProfile', null) == null || request.resource.data.terpeneProfile is list) &&
        (request.resource.data.get('thc', null) == null || request.resource.data.thc is map) &&
        (request.resource.data.get('cbd', null) == null || request.resource.data.cbd is map) &&
        // Image validation (basic)
        (request.resource.data.get('images', null) == null || (
          request.resource.data.images is list &&
          (request.resource.data.images.size() == 0 || (
            request.resource.data.images.size() == 1 &&
            request.resource.data.images[0] is map &&
            request.resource.data.images[0].url is string &&
            request.resource.data.images[0].url.matches("^https://firebasestorage.googleapis.com/v0/b/grenecultivar.appspot.com/o/cultivar-images%2Fuser-submitted%2F.+$")
          ))
        )) &&
        // Ensure no other top-level fields are present
        request.resource.data.keys().hasOnly([
          'name', 'sourceEmail', 'genetics', 'description', 'effects', 'flavors',
          'terpeneProfile', 'images', 'thc', 'cbd', 'status', 'submittedAt', 'source', 'primaryImageAlt' // Added primaryImageAlt and source
        ]);
    }

    // Rules for 'cultivars' collection
    match /cultivars/{cultivarId} {
      allow list: if true; // Publicly listable, client filters display

      allow get: if
        (resource.data.status == "Live" || resource.data.status == "featured") ||
        (request.auth != null); // Public can get Live/Featured, Auth can get any

      allow create: if request.auth != null &&
        request.resource.data.name is string && request.resource.data.name.size() > 0 &&
        request.resource.data.status is string &&
        request.resource.data.createdAt == request.time &&
        request.resource.data.updatedAt == request.time &&
        request.resource.data.history is list && request.resource.data.history.size() > 0 &&
        request.resource.data.history[0].event is string && // Basic check for history structure
        isISOTimestampString(request.resource.data.history[0].timestamp);

      allow update: if request.auth != null &&
        request.resource.data.updatedAt == request.time &&
        request.resource.data.createdAt == resource.data.createdAt && // Don't allow changing createdAt
        // Allow reviews to be added (arrayUnion)
        (request.resource.data.reviews.size() == resource.data.reviews.size() + 1 || request.resource.data.reviews.size() == resource.data.reviews.size() ) &&
        (request.resource.data.reviews.size() == 0 || request.resource.data.reviews[-1] is map && isISOTimestampString(request.resource.data.reviews[-1].createdAt) ) &&
        // Allow history to be added (arrayUnion)
        (request.resource.data.history.size() == resource.data.history.size() + 1 || request.resource.data.history.size() == resource.data.history.size() ) &&
        (request.resource.data.history.size() == 0 || request.resource.data.history[-1] is map && isISOTimestampString(request.resource.data.history[-1].timestamp));

      allow delete: if request.auth != null;
    }
  }
}

    