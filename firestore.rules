
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    // Validate a client-provided ISO timestamp string
    function isISOTimestampString(timestamp) {
      return timestamp is string && timestamp.matches("^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,3})?Z$");
    }

    function isValidAdminImageUrl(url) {
      if (!(url is string)) {
        return false;
      }
      // Ensure it's a Firebase Storage URL for this project
      let projectStoragePrefix = 'https://firebasestorage.googleapis.com/v0/b/' + firebase.env("PROJECT_ID") + '.appspot.com/o/';
      if (!url.startsWith(projectStoragePrefix)) {
        return false;
      }
      // Ensure it's within 'cultivar-images/' but NOT 'cultivar-images/user-submitted/'
      let imagePath = url.split('?')[0].replace(projectStoragePrefix, ''); // Get path after /o/
      return imagePath.startsWith('cultivar-images%2F') && !imagePath.startsWith('cultivar-images%2Fuser-submitted%2F');
    }

    function isValidUserSubmittedImageUrl(url) {
      if (!(url is string)) {
        return false;
      }
      let expectedPath = 'https://firebasestorage.googleapis.com/v0/b/' + 'grenecultivar' + '.appspot.com/o/cultivar-images%2Fuser-submitted%2F';
      return url.startsWith(expectedPath);
    }

    // Base Cultivar Data Validation (for create/update on main collection)
    function isValidCultivarData(data) {
      return data.name is string && data.name.size() >= 3 &&
             data.status is string &&
             (!('description' in data) || data.description is string) &&
             (!('genetics' in data) || data.genetics is string) &&
             (!('source' in data) || data.source is string) &&
             (!('supplierUrl' in data) || data.supplierUrl is string || data.supplierUrl == '') &&
             // THC/CBD checks (optional, but if present, must be maps)
             (!('thc' in data) || data.thc is map) &&
             (!('cbd' in data) || data.cbd is map) &&
             // Images: optional, must be list, each item a map with string id, url, alt
             (!('images' in data) || data.images == null ||
               (data.images is list && (data.images.size() == 0 || data.images.all(img ->
                 img is map &&
                 'id' in img && img.id is string &&
                 'url' in img && img.url is string && (isValidAdminImageUrl(img.url) || isValidUserSubmittedImageUrl(img.url)) && // Allow either type if moving
                 'alt' in img && img.alt is string &&
                 (!('data-ai-hint' in img) || img['data-ai-hint'] is string)
               )))
             ) &&
             // TerpeneProfile: optional, must be list, each item a map with string name
            (!('terpeneProfile' in data) || data.terpeneProfile == null ||
              (data.terpeneProfile is list && (data.terpeneProfile.size() == 0 || data.terpeneProfile.all(tp ->
                tp is map && 'name' in tp && tp.name is string && (!('percentage' in tp) || tp.percentage is number)
              )))
            ) &&
            // Effects, MedicalEffects, Flavors, Parents, Children: optional, must be lists of strings
            (!('effects' in data) || (data.effects is list && (data.effects.size() == 0 || data.effects.all(e -> e is string)))) &&
            (!('medicalEffects' in data) || (data.medicalEffects is list && (data.medicalEffects.size() == 0 || data.medicalEffects.all(me -> me is string)))) &&
            (!('flavors' in data) || (data.flavors is list && (data.flavors.size() == 0 || data.flavors.all(f -> f is string)))) &&
            (!('parents' in data) || (data.parents is list && (data.parents.size() == 0 || data.parents.all(p -> p is string)))) &&
            (!('children' in data) || (data.children is list && (data.children.size() == 0 || data.children.all(c -> c is string))));
    }

    match /cultivars/{cultivarId} {
      allow list: if true; // Public listing, client filters
      allow get: if resource.data.status == 'Live' || resource.data.status == 'featured' || request.auth != null;

      allow create: if request.auth != null &&
                       isValidCultivarData(request.resource.data) &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.history is list && request.resource.data.history.size() > 0 &&
                       isISOTimestampString(request.resource.data.history[0].timestamp); // Basic check on first history entry

      allow update: if request.auth != null &&
                       isValidCultivarData(request.resource.data) &&
                       request.resource.data.updatedAt == request.time &&
                       request.resource.data.createdAt == resource.data.createdAt && // Cannot change createdAt
                       // Allow reviews and history to be appended
                       (request.resource.data.reviews == resource.data.reviews || (request.resource.data.reviews is list && request.resource.data.reviews.size() >= resource.data.reviews.size())) &&
                       (request.resource.data.history is list && request.resource.data.history.size() >= resource.data.history.size() &&
                         (request.resource.data.history.size() == resource.data.history.size() || isISOTimestampString(request.resource.data.history[request.resource.data.history.size() - 1].timestamp)));


      allow delete: if request.auth != null; // Only authenticated users (admins ideally)
    }

    match /submitted_cultivars/{submissionId} {
      allow read, update, delete: if request.auth != null; // Only admins can manage submissions

      allow create: if request.resource.data.name is string && request.resource.data.name.size() >= 3 &&
                       request.resource.data.sourceEmail is string && request.resource.data.sourceEmail.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$") &&
                       request.resource.data.status == 'User Submitted' &&
                       request.resource.data.submittedAt == request.time &&
                       // Optional fields validation (basic type checks if present)
                       (!('description' in request.resource.data) || request.resource.data.description is string) &&
                       (!('genetics' in request.resource.data) || request.resource.data.genetics is string) &&
                       (!('thc' in request.resource.data) || request.resource.data.thc is map) &&
                       (!('cbd' in request.resource.data) || request.resource.data.cbd is map) &&
                       // Images: optional, max 1, if present, must be map with string url matching user-submitted path
                       (!('images' in request.resource.data) || request.resource.data.images == null ||
                         (request.resource.data.images is list &&
                           (request.resource.data.images.size() == 0 ||
                             (request.resource.data.images.size() == 1 &&
                               request.resource.data.images[0] is map &&
                               'url' in request.resource.data.images[0] && request.resource.data.images[0].url is string &&
                               isValidUserSubmittedImageUrl(request.resource.data.images[0].url) &&
                               'alt' in request.resource.data.images[0] && request.resource.data.images[0].alt is string &&
                               'id' in request.resource.data.images[0] && request.resource.data.images[0].id is string
                             )
                           )
                         )
                       ) &&
                       // Effects, Flavors, Terpenes: optional, must be lists
                       (!('effects' in request.resource.data) || (request.resource.data.effects is list && (request.resource.data.effects.size() == 0 || request.resource.data.effects.all(e -> e is string)))) &&
                       (!('flavors' in request.resource.data) || (request.resource.data.flavors is list && (request.resource.data.flavors.size() == 0 || request.resource.data.flavors.all(f -> f is string)))) &&
                       (!('terpeneProfile' in request.resource.data) || (request.resource.data.terpeneProfile is list && (request.resource.data.terpeneProfile.size() == 0 || request.resource.data.terpeneProfile.all(tp -> tp is map && 'name' in tp && tp.name is string)))) &&
                       // Ensure no other fields are present
                       request.resource.data.keys().hasOnly([
                         'name', 'sourceEmail', 'source', 'genetics', 'description', 'effects', 'flavors',
                         'terpeneProfile', 'images', 'thc', 'cbd', 'status', 'submittedAt'
                       ]);
    }
    // Ensure all match blocks are closed before this final brace
  }
}

    